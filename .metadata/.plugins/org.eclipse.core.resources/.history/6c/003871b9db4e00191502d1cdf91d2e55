import javax.xml.crypto.Data;

/**
 * 顺序表练习
 * @author dnd
 *
 */
/*
 * 定义顺序表数据元素 结点
 */
class DATA {
	String key;			//结点的关键字
	String name;
	int age;
}
/*
 * 定义顺序表结构
 */
class SLType{
	static final int MAXLEN = 100;	//定义顺序表的最大长度
	DATA[] ListData = new DATA[MAXLEN+1];	//保存顺序表的结构数组，为了容易理解，下标0的位置不用
	int ListLen;		//顺序表已存结点的数量
	/*
	 * 初始化顺序表
	 */
	void SLInit(SLType SL) {
		SL.ListLen = 0;	//初始化为空表，并没有清空原始数据
	}
	/*
	 * 计算数据表长度
	 */
	int SLLength(SLType SL) {
		return SL.ListLen;	//返回顺序表的元素数量
	}
	/**
	 * 插入结点，其后的结点编号依次加1
	 * 线性表长度加1
	 * @param SL	预插入的线性表
	 * @param n		插入的位置
	 * @param data	插入的结点
	 * @return	返回1成功，返回0失败
	 */
	int SLInsert(SLType SL,int n,DATA data) {
//		int i;
		if (SL.ListLen >=MAXLEN) {	//顺序表结点数量已达到最大，不能插入新值
			System.out.println("顺序表已满，不能插入结点\n");
			return 0;
		}
		if (n<1 || n>SL.ListLen-1) {		// -1??? 插入结点序号不正确
			System.out.println("插入元素序号错误，不能插入元素\n");
			return 0;
		}
		for(int i=SL.ListLen;i>=n;i--) {		//将顺序表中的数据向后移动
			SL.ListData[i+1] = SL.ListData[i];		//数据从下标1开始存储，正常应该是 i = i-1;
		}
		SL.ListData[n] = data;		//插入结点		同理，正常应该是第 n-1
		SL.ListLen++;				//顺序表结点数量加1
		return 1;
	}
	/**
	 * 追加结点，不必进行数据移动，单独给出函数
	 * @param SL	要追加到的顺序表
	 * @param data	要追加的数据
	 * @return	返回1成功，返回0失败
	 */
	int SLAdd(SLType SL,DATA data) {
		if (SL.ListLen >=MAXLEN) {	//顺序表结点数量已达到最大，不能插入新值
			System.out.println("顺序表已满，不能插入结点\n");
			return 0;
		}
		SL.ListData[++SL.ListLen] = data;
		return 1;
	}
}
public class SequentialList {

	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	

}
